package test

import (
	"fmt"
	flow "github.com/Bilibotter/light-flow"
	"sync/atomic"
	"testing"
)

func AfterFlowProcessor(info flow.WorkFlow) (bool, error) {
	if info.Name() == "" {
		panic("flow name is empty")
	}
	if len(info.ID()) == 0 {
		panic("flow id is empty")
	}
	atomic.AddInt64(&current, 1)
	fmt.Printf("..[Process: %s] AfterFlowProcessor execute \n", info.Name())
	return true, nil
}

func BeforeFlowProcessor(info flow.WorkFlow) (bool, error) {
	if info.Name() == "" {
		panic("flow name is empty")
	}
	if len(info.ID()) == 0 {
		panic("flow id is empty")
	}
	atomic.AddInt64(&current, 1)
	fmt.Printf("..[Process: %s] BeforeFlowProcessor execute \n", info.Name())
	return true, nil
}

func TestInfoCorrect(t *testing.T) {
	defer resetCurrent()
	defer flow.ResetDefaultCallback()
	dc := flow.DefaultCallback()
	dc.BeforeStep(true, Ck(t, "Step1").Exclude("Step2", "Step3", "Step4").Check())
	dc.BeforeStep(true, Ck(t, "Step2").Contain("Step1").Exclude("Step3", "Step4").Check())
	dc.BeforeStep(true, Ck(t, "Step3").Contain("Step1").Exclude("Step2", "Step4").Check())
	dc.BeforeStep(true, Ck(t, "Step4").Contain("Step1", "Step2", "Step3").Check())

	dc.AfterStep(true, Ck(t, "Step1").Exclude("Step2", "Step3", "Step4").Check())
	dc.AfterStep(true, Ck(t, "Step2").Contain("Step1").Exclude("Step3", "Step4").Check())
	dc.AfterStep(true, Ck(t, "Step3").Contain("Step1").Exclude("Step2", "Step4").Check())
	dc.AfterStep(true, Ck(t, "Step4").Contain("Step1", "Step2", "Step3").Check())

	workflow := flow.RegisterFlow("TestInfoCorrect")
	process := workflow.Process("TestInfoCorrect")
	process.NameStep(Ck(t).SetFn(), "Step1")
	process.NameStep(Ck(t).SetFn(), "Step2", "Step1")
	process.NameStep(Ck(t).SetFn(), "Step3", "Step1")
	process.NameStep(Ck(t).SetFn(), "Step4", "Step2", "Step3")
	workflow.AfterFlow(false, CheckResult(t, 12, flow.Success))
	flow.DoneFlow("TestInfoCorrect", nil)
}

func TestDefaultProcessConfig(t *testing.T) {
	defer resetCurrent()
	defer flow.ResetDefaultCallback()
	df := flow.DefaultCallback()
	df.BeforeStep(true, PreProcessor)
	df.AfterStep(true, PostProcessor)
	df.BeforeProcess(true, ProcProcessor)
	df.AfterProcess(true, ProcProcessor)
	df.BeforeFlow(true, BeforeFlowProcessor)
	df.AfterFlow(true, AfterFlowProcessor)

	workflow := flow.RegisterFlow("TestDefaultProcessConfig")
	process := workflow.Process("TestDefaultProcessConfig")
	process.NameStep(Fn(t).Normal(), "1")
	process.NameStep(Fn(t).Normal(), "2", "1")
	process.NameStep(Fn(t).Normal(), "3", "2")
	process.NameStep(Fn(t).Normal(), "4", "3")
	workflow.AfterFlow(false, CheckResult(t, 16, flow.Success))
	flow.DoneFlow("TestDefaultProcessConfig", nil)
}

func TestMergeDefaultProcessConfig(t *testing.T) {
	defer resetCurrent()
	defer flow.ResetDefaultCallback()
	df := flow.DefaultCallback()
	df.BeforeStep(true, PreProcessor)
	df.AfterStep(true, PostProcessor)
	df.BeforeProcess(true, ProcProcessor)
	df.AfterProcess(true, ProcProcessor)
	df.BeforeFlow(true, BeforeFlowProcessor)
	df.AfterFlow(true, AfterFlowProcessor)

	workflow := flow.RegisterFlow("TestMergeDefaultProcessConfig")
	workflow.BeforeFlow(true, BeforeFlowProcessor)
	workflow.AfterFlow(true, AfterFlowProcessor)
	process := workflow.Process("TestMergeDefaultProcessConfig")
	process.NameStep(GenerateStep(1), "1")
	process.NameStep(GenerateStep(2), "2", "1")
	process.BeforeStep(true, PreProcessor)
	process.AfterStep(true, PostProcessor)
	process.BeforeProcess(true, ProcProcessor)
	process.AfterProcess(true, ProcProcessor)
	workflow.AfterFlow(false, CheckResult(t, 18, flow.Success))
	flow.DoneFlow("TestMergeDefaultProcessConfig", nil)
}

func TestCallbackCond(t *testing.T) {
	defer resetCurrent()
	defer flow.ResetDefaultCallback()
	df := flow.DefaultCallback()
	df.BeforeFlow(true, BeforeFlowProcessor).OnlyFor("TestCallbackCond")
	df.BeforeFlow(true, BeforeFlowProcessor).OnlyFor("TestCallbackCondNotExist")
	df.AfterFlow(true, AfterFlowProcessor).OnlyFor("TestCallbackCond").When(flow.Failed)
	df.AfterFlow(true, AfterFlowProcessor).OnlyFor("TestCallbackCond").When(flow.Success)
	df.BeforeProcess(true, ProcProcessor).OnlyFor("TestCallbackCond")
	df.BeforeProcess(true, ProcProcessor).OnlyFor("TestCallbackCondNotExist")
	df.AfterProcess(true, AfterProcProcessor).OnlyFor("TestCallbackCond").When(flow.Failed)
	df.AfterProcess(true, AfterProcProcessor).OnlyFor("TestCallbackCond").When(flow.Success)
	df.BeforeStep(true, PreProcessor).OnlyFor("1")
	df.BeforeStep(true, PreProcessor).OnlyFor("NotExist")
	df.AfterStep(true, PostProcessor).OnlyFor("1").When(flow.Success)
	df.AfterStep(true, PostProcessor).OnlyFor("1").When(flow.Failed)

	workflow := flow.RegisterFlow("TestCallbackCond")
	process := workflow.Process("TestCallbackCond")
	process.NameStep(GenerateStep(1), "1")
	process.NameStep(GenerateStep(2), "2", "1")
	workflow.AfterFlow(false, CheckResult(t, 8, flow.Success))
	flow.DoneFlow("TestCallbackCond", nil)
}

func TestCallbackCond0(t *testing.T) {
	defer resetCurrent()
	defer flow.ResetDefaultCallback()
	df := flow.DefaultCallback()
	df.BeforeFlow(true, BeforeFlowProcessor).NotFor("TestCallbackCond0")
	df.BeforeFlow(true, BeforeFlowProcessor).NotFor("TestCallbackCondNotExist")
	df.AfterFlow(true, AfterFlowProcessor).OnlyFor("TestCallbackCond0").Exclude(flow.Failed)
	df.AfterFlow(true, AfterFlowProcessor).OnlyFor("TestCallbackCond").Exclude(flow.Success)
	df.BeforeProcess(true, ProcProcessor).NotFor("TestCallbackCond0")
	df.BeforeProcess(true, ProcProcessor).NotFor("TestCallbackCondNotExist")
	df.AfterProcess(true, AfterProcProcessor).OnlyFor("TestCallbackCond0").Exclude(flow.Failed)
	df.AfterProcess(true, AfterProcProcessor).OnlyFor("TestCallbackCond0").Exclude(flow.Success)
	df.BeforeStep(true, PreProcessor).NotFor("1")
	df.AfterStep(true, PostProcessor).OnlyFor("1").Exclude(flow.Success)
	df.AfterStep(true, PostProcessor).OnlyFor("1").Exclude(flow.Failed)

	workflow := flow.RegisterFlow("TestCallbackCond0")
	process := workflow.Process("TestCallbackCond0")
	process.NameStep(GenerateStep(1), "1")
	process.NameStep(GenerateStep(2), "2", "1")
	workflow.AfterFlow(false, CheckResult(t, 8, flow.Success))
	flow.DoneFlow("TestCallbackCond0", nil)
}

func TestUnableDefaultProcessConfig(t *testing.T) {
	defer resetCurrent()
	defer flow.ResetDefaultCallback()
	df := flow.DefaultCallback()
	df.BeforeStep(true, PreProcessor)
	df.AfterStep(true, PostProcessor)
	df.BeforeProcess(true, ProcProcessor)
	df.AfterProcess(true, ProcProcessor)
	df.BeforeFlow(true, BeforeFlowProcessor)
	df.AfterFlow(true, AfterFlowProcessor)

	workflow := flow.RegisterFlow("TestUnableDefaultProcessConfig")
	workflow.DisableDefaultCallback()
	process := workflow.Process("TestUnableDefaultProcessConfig")
	process.NameStep(GenerateStep(1), "1")
	process.NameStep(GenerateStep(2), "2", "1")
	process.NameStep(GenerateStep(3), "3", "2")
	process.NameStep(GenerateStep(4), "4", "3")
	process.DisableDefaultCallback()
	workflow.AfterFlow(false, CheckResult(t, 4, flow.Success))
	flow.DoneFlow("TestUnableDefaultProcessConfig", nil)
}

func TestMustCallbackFailedDueToSkip(t *testing.T) {
	defer resetCurrent()
	wf := flow.RegisterFlow("TestMustCallbackFailedDueToSkip0")
	process := wf.Process("TestMustCallbackFailedDueToSkip0")
	process.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	wf.AfterStep(true, Fx[flow.Step](t).Error().Callback())
	wf.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	wf.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	wf.AfterFlow(false, CheckResult(t, 2, flow.CallbackFail))
	flow.DoneFlow("TestMustCallbackFailedDueToSkip0", nil)

	resetCurrent()
	wf = flow.RegisterFlow("TestMustCallbackFailedDueToSkip1")
	process = wf.Process("TestMustCallbackFailedDueToSkip1")
	process.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	wf.AfterProcess(true, Fx[flow.Process](t).Error().Callback())
	wf.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf.AfterFlow(false, CheckResult(t, 2, flow.CallbackFail))
	flow.DoneFlow("TestMustCallbackFailedDueToSkip1", nil)

	resetCurrent()
	wf = flow.RegisterFlow("TestMustCallbackFailedDueToSkip2")
	process = wf.Process("TestMustCallbackFailedDueToSkip2")
	process.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Error().Callback())
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.AfterFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	ff := flow.DoneFlow("TestMustCallbackFailedDueToSkip2", nil)
	CheckResult(t, 2, flow.CallbackFail)(any(ff).(flow.WorkFlow))
}

func TestBeforeMustCallbackFailedDueToSkip(t *testing.T) {
	defer resetCurrent()
	wf := flow.RegisterFlow("TestBeforeMustCallbackFailedDueToSkip0")
	process := wf.Process("TestBeforeMustCallbackFailedDueToSkip0")
	process.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	wf.BeforeStep(true, Fx[flow.Step](t).Error().Callback())
	wf.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	wf.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	ff := flow.DoneFlow("TestBeforeMustCallbackFailedDueToSkip0", nil)
	CheckResult(t, 1, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	wf = flow.RegisterFlow("TestBeforeMustCallbackFailedDueToSkip1")
	process = wf.Process("TestBeforeMustCallbackFailedDueToSkip1")
	process.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	wf.BeforeProcess(true, Fx[flow.Process](t).Error().Callback())
	wf.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	ff = flow.DoneFlow("TestBeforeMustCallbackFailedDueToSkip1", nil)
	CheckResult(t, 1, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	wf = flow.RegisterFlow("TestBeforeMustCallbackFailedDueToSkip2")
	process = wf.Process("TestBeforeMustCallbackFailedDueToSkip2")
	process.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Error().Callback())
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.BeforeFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	ff = flow.DoneFlow("TestBeforeMustCallbackFailedDueToSkip2", nil)
	CheckResult(t, 1, flow.CallbackFail)(any(ff).(flow.WorkFlow))
}

func TestMustCallbackPanicDueToSkip(t *testing.T) {
	defer resetCurrent()
	wf := flow.RegisterFlow("TestMustCallbackPanicDueToSkip0")
	process := wf.Process("TestMustCallbackPanicDueToSkip0")
	process.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	wf.AfterStep(true, Fx[flow.Step](t).Panic().Callback())
	wf.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	wf.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	wf.AfterFlow(false, CheckResult(t, 2, flow.CallbackFail))
	flow.DoneFlow("TestMustCallbackPanicDueToSkip0", nil)

	resetCurrent()
	wf = flow.RegisterFlow("TestMustCallbackPanicDueToSkip1")
	process = wf.Process("TestMustCallbackPanicDueToSkip1")
	process.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	wf.AfterProcess(true, Fx[flow.Process](t).Panic().Callback())
	wf.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf.AfterFlow(false, CheckResult(t, 2, flow.CallbackFail))
	flow.DoneFlow("TestMustCallbackPanicDueToSkip1", nil)

	resetCurrent()
	wf = flow.RegisterFlow("TestMustCallbackPanicDueToSkip2")
	process = wf.Process("TestMustCallbackPanicDueToSkip2")
	process.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Panic().Callback())
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.AfterFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	ff := flow.DoneFlow("TestMustCallbackPanicDueToSkip2", nil)
	CheckResult(t, 2, flow.CallbackFail)(any(ff).(flow.WorkFlow))
}

func TestBeforeMustCallbackPanicDueToSkip(t *testing.T) {
	defer resetCurrent()
	wf := flow.RegisterFlow("TestBeforeMustCallbackPanicDueToSkip0")
	process := wf.Process("TestBeforeMustCallbackPanicDueToSkip0")
	process.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	wf.BeforeStep(true, Fx[flow.Step](t).Panic().Callback())
	wf.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	wf.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	ff := flow.DoneFlow("TestBeforeMustCallbackPanicDueToSkip0", nil)
	CheckResult(t, 1, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	wf = flow.RegisterFlow("TestBeforeMustCallbackPanicDueToSkip1")
	process = wf.Process("TestBeforeMustCallbackPanicDueToSkip1")
	process.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	wf.BeforeProcess(true, Fx[flow.Process](t).Panic().Callback())
	wf.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	ff = flow.DoneFlow("TestBeforeMustCallbackPanicDueToSkip1", nil)
	CheckResult(t, 1, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	wf = flow.RegisterFlow("TestBeforeMustCallbackPanicDueToSkip2")
	process = wf.Process("TestBeforeMustCallbackPanicDueToSkip2")
	process.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Panic().Callback())
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.BeforeFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	ff = flow.DoneFlow("TestBeforeMustCallbackPanicDueToSkip2", nil)
	CheckResult(t, 1, flow.CallbackFail)(any(ff).(flow.WorkFlow))
}

func TestMustCallbackFailBreakChain(t *testing.T) {
	defer resetCurrent()
	defer flow.ResetDefaultCallback()
	df := flow.DefaultCallback()
	df.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	df.BeforeFlow(true, Fx[flow.WorkFlow](t).Error().Callback())
	df.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	df.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf := flow.RegisterFlow("TestMustCallbackFailBreakChain")
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	proc := wf.Process("TestMustCallbackFailBreakChain")
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff := flow.DoneFlow("TestMustCallbackFailBreakChain", nil)
	CheckResult(t, 2, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	df.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf = flow.RegisterFlow("TestMustCallbackFailBreakChain0")
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Error().Callback())
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	proc = wf.Process("TestMustCallbackFailBreakChain0")
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestMustCallbackFailBreakChain0", nil)
	CheckResult(t, 3, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	df.BeforeProcess(true, Fx[flow.Process](t).Error().Callback())
	df.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	df.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf = flow.RegisterFlow("TestMustCallbackFailBreakChain1")
	wf.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc = wf.Process("TestMustCallbackFailBreakChain1")
	proc.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestMustCallbackFailBreakChain1", nil)
	CheckResult(t, 2, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	df.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf = flow.RegisterFlow("TestMustCallbackFailBreakChain2")
	wf.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf.BeforeProcess(true, Fx[flow.Process](t).Error().Callback())
	wf.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc = wf.Process("TestMustCallbackFailBreakChain2")
	proc.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestMustCallbackFailBreakChain2", nil)
	CheckResult(t, 3, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	df.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	wf = flow.RegisterFlow("TestMustCallbackFailBreakChain3")
	wf.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	wf.BeforeStep(true, Fx[flow.Step](t).Error().Callback())
	wf.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	wf.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	proc = wf.Process("TestMustCallbackFailBreakChain3")
	proc.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	proc.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestMustCallbackFailBreakChain3", nil)
	CheckResult(t, 3, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	df.BeforeStep(true, Fx[flow.Step](t).Error().Callback())
	df.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	df.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	wf = flow.RegisterFlow("TestMustCallbackFailBreakChain4")
	wf.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	wf.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	proc = wf.Process("TestMustCallbackFailBreakChain4")
	proc.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	proc.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestMustCallbackFailBreakChain4", nil)
	CheckResult(t, 2, flow.CallbackFail)(any(ff).(flow.WorkFlow))
}

func TestMustAfterCallbackFailBreakChain(t *testing.T) {
	defer resetCurrent()
	defer flow.ResetDefaultCallback()
	df := flow.DefaultCallback()
	df.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	df.AfterFlow(true, Fx[flow.WorkFlow](t).Error().Callback())
	df.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf := flow.RegisterFlow("TestMustAfterCallbackFailBreakChain")
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	proc := wf.Process("TestMustAfterCallbackFailBreakChain")
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff := flow.DoneFlow("TestMustAfterCallbackFailBreakChain", nil)
	CheckResult(t, 3, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf = flow.RegisterFlow("TestMustAfterCallbackFailBreakChain0")
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Error().Callback())
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	proc = wf.Process("TestMustAfterCallbackFailBreakChain0")
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestMustAfterCallbackFailBreakChain0", nil)
	CheckResult(t, 4, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	df.AfterProcess(true, Fx[flow.Process](t).Error().Callback())
	df.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf = flow.RegisterFlow("TestMustAfterCallbackFailBreakChain1")
	wf.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc = wf.Process("TestMustAfterCallbackFailBreakChain1")
	proc.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestMustAfterCallbackFailBreakChain1", nil)
	CheckResult(t, 3, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf = flow.RegisterFlow("TestMustAfterCallbackFailBreakChain2")
	wf.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf.AfterProcess(true, Fx[flow.Process](t).Error().Callback())
	wf.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc = wf.Process("TestMustAfterCallbackFailBreakChain2")
	proc.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestMustAfterCallbackFailBreakChain2", nil)
	CheckResult(t, 4, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	wf = flow.RegisterFlow("TestMustAfterCallbackFailBreakChain3")
	wf.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	wf.AfterStep(true, Fx[flow.Step](t).Error().Callback())
	wf.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	proc = wf.Process("TestMustAfterCallbackFailBreakChain3")
	proc.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestMustAfterCallbackFailBreakChain3", nil)
	CheckResult(t, 4, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	df.AfterStep(true, Fx[flow.Step](t).Error().Callback())
	df.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	wf = flow.RegisterFlow("TestMustAfterCallbackFailBreakChain4")
	wf.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	proc = wf.Process("TestMustAfterCallbackFailBreakChain4")
	proc.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestMustAfterCallbackFailBreakChain4", nil)
	CheckResult(t, 3, flow.CallbackFail)(any(ff).(flow.WorkFlow))
}

func TestNoMustCallbackFailNotBreakChain(t *testing.T) {
	defer resetCurrent()
	defer flow.ResetDefaultCallback()
	df := flow.DefaultCallback()
	df.AfterFlow(false, Fx[flow.WorkFlow](t).Error().Callback())
	df.AfterFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	wf := flow.RegisterFlow("TestNoMustCallbackFailNotBreakChain")
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	proc := wf.Process("TestNoMustCallbackFailNotBreakChain")
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff := flow.DoneFlow("TestNoMustCallbackFailNotBreakChain", nil)
	CheckResult(t, 3, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustCallbackFailNotBreakChain0")
	wf.AfterFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.AfterFlow(false, Fx[flow.WorkFlow](t).Error().Callback())
	wf.AfterFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	proc = wf.Process("TestNoMustCallbackFailNotBreakChain0")
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustCallbackFailNotBreakChain0", nil)
	CheckResult(t, 4, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	df.AfterProcess(false, Fx[flow.Process](t).Error().Callback())
	df.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustCallbackFailNotBreakChain1")
	wf.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc = wf.Process("TestNoMustCallbackFailNotBreakChain1")
	proc.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustCallbackFailNotBreakChain1", nil)
	CheckResult(t, 5, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustCallbackFailNotBreakChain2")
	wf.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf.AfterProcess(false, Fx[flow.Process](t).Error().Callback())
	wf.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc = wf.Process("TestNoMustCallbackFailNotBreakChain2")
	proc.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustCallbackFailNotBreakChain2", nil)
	CheckResult(t, 5, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustCallbackFailNotBreakChain3")
	wf.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	wf.AfterStep(false, Fx[flow.Step](t).Error().Callback())
	wf.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	proc = wf.Process("TestNoMustCallbackFailNotBreakChain3")
	proc.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustCallbackFailNotBreakChain3", nil)
	CheckResult(t, 5, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	df.AfterStep(false, Fx[flow.Step](t).Error().Callback())
	df.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustCallbackFailNotBreakChain4")
	wf.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	proc = wf.Process("TestNoMustCallbackFailNotBreakChain4")
	proc.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustCallbackFailNotBreakChain4", nil)
	CheckResult(t, 5, flow.Success)(any(ff).(flow.WorkFlow))
}

func TestNoMustBeforeCallbackFailNotBreakChain(t *testing.T) {
	defer resetCurrent()
	defer flow.ResetDefaultCallback()
	df := flow.DefaultCallback()
	df.BeforeFlow(false, Fx[flow.WorkFlow](t).Error().Callback())
	df.BeforeFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	wf := flow.RegisterFlow("TestNoMustBeforeCallbackFailNotBreakChain")
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	proc := wf.Process("TestNoMustBeforeCallbackFailNotBreakChain")
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff := flow.DoneFlow("TestNoMustBeforeCallbackFailNotBreakChain", nil)
	CheckResult(t, 3, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustBeforeCallbackFailNotBreakChain0")
	wf.BeforeFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.BeforeFlow(false, Fx[flow.WorkFlow](t).Error().Callback())
	wf.BeforeFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	proc = wf.Process("TestNoMustBeforeCallbackFailNotBreakChain0")
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustBeforeCallbackFailNotBreakChain0", nil)
	CheckResult(t, 4, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	df.BeforeProcess(false, Fx[flow.Process](t).Error().Callback())
	df.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustBeforeCallbackFailNotBreakChain1")
	wf.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc = wf.Process("TestNoMustBeforeCallbackFailNotBreakChain1")
	proc.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustBeforeCallbackFailNotBreakChain1", nil)
	CheckResult(t, 5, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustBeforeCallbackFailNotBreakChain2")
	wf.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf.BeforeProcess(false, Fx[flow.Process](t).Error().Callback())
	wf.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc = wf.Process("TestNoMustBeforeCallbackFailNotBreakChain2")
	proc.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustBeforeCallbackFailNotBreakChain2", nil)
	CheckResult(t, 5, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustBeforeCallbackFailNotBreakChain3")
	wf.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	wf.BeforeStep(false, Fx[flow.Step](t).Error().Callback())
	wf.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	proc = wf.Process("TestNoMustBeforeCallbackFailNotBreakChain3")
	proc.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustBeforeCallbackFailNotBreakChain3", nil)
	CheckResult(t, 5, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	df.BeforeStep(false, Fx[flow.Step](t).Error().Callback())
	df.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustBeforeCallbackFailNotBreakChain4")
	wf.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	proc = wf.Process("TestNoMustBeforeCallbackFailNotBreakChain4")
	proc.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustBeforeCallbackFailNotBreakChain4", nil)
	CheckResult(t, 5, flow.Success)(any(ff).(flow.WorkFlow))
}

func TestNoMustCallbackFailNotBreakChain00(t *testing.T) {
	defer resetCurrent()
	defer flow.ResetDefaultCallback()
	df := flow.DefaultCallback()
	df.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	df.AfterFlow(false, Fx[flow.WorkFlow](t).Error().Callback())
	df.AfterFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	wf := flow.RegisterFlow("TestNoMustCallbackFailNotBreakChain00")
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	proc := wf.Process("TestNoMustCallbackFailNotBreakChain00")
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff := flow.DoneFlow("TestNoMustCallbackFailNotBreakChain00", nil)
	CheckResult(t, 4, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustCallbackFailNotBreakChain000")
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.AfterFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.AfterFlow(false, Fx[flow.WorkFlow](t).Error().Callback())
	wf.AfterFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	proc = wf.Process("TestNoMustCallbackFailNotBreakChain000")
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustCallbackFailNotBreakChain000", nil)
	CheckResult(t, 5, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	df.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	df.AfterProcess(false, Fx[flow.Process](t).Error().Callback())
	df.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustCallbackFailNotBreakChain001")
	wf.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc = wf.Process("TestNoMustCallbackFailNotBreakChain001")
	proc.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustCallbackFailNotBreakChain001", nil)
	CheckResult(t, 6, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustCallbackFailNotBreakChain002")
	wf.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf.AfterProcess(false, Fx[flow.Process](t).Error().Callback())
	wf.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc = wf.Process("TestNoMustCallbackFailNotBreakChain002")
	proc.AfterProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustCallbackFailNotBreakChain002", nil)
	CheckResult(t, 6, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustCallbackFailNotBreakChain003")
	wf.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	wf.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	wf.AfterStep(false, Fx[flow.Step](t).Error().Callback())
	wf.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	proc = wf.Process("TestNoMustCallbackFailNotBreakChain003")
	proc.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustCallbackFailNotBreakChain003", nil)
	CheckResult(t, 6, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	df.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	df.AfterStep(false, Fx[flow.Step](t).Error().Callback())
	df.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustCallbackFailNotBreakChain004")
	wf.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	proc = wf.Process("TestNoMustCallbackFailNotBreakChain004")
	proc.AfterStep(false, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustCallbackFailNotBreakChain004", nil)
	CheckResult(t, 6, flow.Success)(any(ff).(flow.WorkFlow))
}

func TestNoMustBeforeCallbackFailNotBreakChain00(t *testing.T) {
	defer resetCurrent()
	defer flow.ResetDefaultCallback()
	df := flow.DefaultCallback()
	df.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	df.BeforeFlow(false, Fx[flow.WorkFlow](t).Error().Callback())
	df.BeforeFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	wf := flow.RegisterFlow("TestNoMustBeforeCallbackFailNotBreakChain00")
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	proc := wf.Process("TestNoMustBeforeCallbackFailNotBreakChain00")
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff := flow.DoneFlow("TestNoMustBeforeCallbackFailNotBreakChain00", nil)
	CheckResult(t, 4, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustBeforeCallbackFailNotBreakChain000")
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.BeforeFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.BeforeFlow(false, Fx[flow.WorkFlow](t).Error().Callback())
	wf.BeforeFlow(false, Fx[flow.WorkFlow](t).Inc().Callback())
	proc = wf.Process("TestNoMustBeforeCallbackFailNotBreakChain000")
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustBeforeCallbackFailNotBreakChain000", nil)
	CheckResult(t, 5, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	df.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	df.BeforeProcess(false, Fx[flow.Process](t).Error().Callback())
	df.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustBeforeCallbackFailNotBreakChain001")
	wf.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc = wf.Process("TestNoMustBeforeCallbackFailNotBreakChain001")
	proc.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustBeforeCallbackFailNotBreakChain001", nil)
	CheckResult(t, 6, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustBeforeCallbackFailNotBreakChain002")
	wf.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	wf.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	wf.BeforeProcess(false, Fx[flow.Process](t).Error().Callback())
	wf.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc = wf.Process("TestNoMustBeforeCallbackFailNotBreakChain002")
	proc.BeforeProcess(false, Fx[flow.Process](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustBeforeCallbackFailNotBreakChain002", nil)
	CheckResult(t, 6, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustBeforeCallbackFailNotBreakChain003")
	wf.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	wf.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	wf.BeforeStep(false, Fx[flow.Step](t).Error().Callback())
	wf.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	proc = wf.Process("TestNoMustBeforeCallbackFailNotBreakChain003")
	proc.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustBeforeCallbackFailNotBreakChain003", nil)
	CheckResult(t, 6, flow.Success)(any(ff).(flow.WorkFlow))

	resetCurrent()
	flow.ResetDefaultCallback()
	df = flow.DefaultCallback()
	df.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	df.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	df.BeforeStep(false, Fx[flow.Step](t).Error().Callback())
	df.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	wf = flow.RegisterFlow("TestNoMustBeforeCallbackFailNotBreakChain004")
	wf.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	proc = wf.Process("TestNoMustBeforeCallbackFailNotBreakChain004")
	proc.BeforeStep(false, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestNoMustBeforeCallbackFailNotBreakChain004", nil)
	CheckResult(t, 6, flow.Success)(any(ff).(flow.WorkFlow))
}

func TestBeforeCallbackBreakExecution(t *testing.T) {
	defer resetCurrent()
	wf := flow.RegisterFlow("TestBeforeCallbackBreakExecution")
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Error().Callback())
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	proc := wf.Process("TestBeforeCallbackBreakExecution")
	proc.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	proc.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff := flow.DoneFlow("TestBeforeCallbackBreakExecution", nil)
	CheckResult(t, 1, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	wf = flow.RegisterFlow("TestBeforeCallbackBreakExecution0")
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	proc = wf.Process("TestBeforeCallbackBreakExecution0")
	proc.BeforeProcess(true, Fx[flow.Process](t).Error().Callback())
	proc.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc.BeforeStep(true, Fx[flow.Step](t).Inc().Callback())
	proc.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestBeforeCallbackBreakExecution0", nil)
	CheckResult(t, 3, flow.CallbackFail)(any(ff).(flow.WorkFlow))

	resetCurrent()
	wf = flow.RegisterFlow("TestBeforeCallbackBreakExecution1")
	wf.BeforeFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	wf.AfterFlow(true, Fx[flow.WorkFlow](t).Inc().Callback())
	proc = wf.Process("TestBeforeCallbackBreakExecution1")
	proc.BeforeProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc.AfterProcess(true, Fx[flow.Process](t).Inc().Callback())
	proc.BeforeStep(true, Fx[flow.Step](t).Error().Callback())
	proc.AfterStep(true, Fx[flow.Step](t).Inc().Callback())
	proc.NameStep(Fx[flow.Step](t).Inc().Step(), "1")
	ff = flow.DoneFlow("TestBeforeCallbackBreakExecution1", nil)
	CheckResult(t, 5, flow.CallbackFail)(any(ff).(flow.WorkFlow))
}
